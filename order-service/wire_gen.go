// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"ecommerce-microservices/common/config"
	"ecommerce-microservices/common/middleware"
	config2 "ecommerce-microservices/order-service/config"
	"ecommerce-microservices/order-service/handlers"
	"ecommerce-microservices/order-service/repository"
	"github.com/gorilla/mux"
)

// Injectors from wire.go:

func InitializeRouter() (*mux.Router, error) {
	appConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	db, err := config2.NewDBConnection(appConfig)
	if err != nil {
		return nil, err
	}
	orderRepository := repository.NewOrderRepository(db)
	orderHandler := handlers.NewOrderHandler(orderRepository)
	router := ProvideRouter(orderHandler)
	return router, nil
}

// wire.go:

func ProvideRouter(handler *handlers.OrderHandler) *mux.Router {
	router := mux.NewRouter()
	router.Use(middleware.LoggingMiddleware)
	router.HandleFunc("/orders", handler.CreateOrder).Methods("POST")
	router.HandleFunc("/orders", handler.GetOrdersByUserID).Methods("GET").Queries("user_id", "{user_id}")
	router.HandleFunc("/order", handler.GetOrderByID).Methods("GET").Queries("id", "{id}")
	return router
}
