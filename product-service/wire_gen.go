// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	config2 "ecommerce-microservices/common/config"
	"ecommerce-microservices/common/middleware"
	"ecommerce-microservices/order-service/config"
	"ecommerce-microservices/product-service/handlers"
	"ecommerce-microservices/product-service/repository"
	"github.com/gorilla/mux"
)

// Injectors from wire.go:

func InitializeRouter() (*mux.Router, error) {
	appConfig, err := ProvideAppConfig()
	if err != nil {
		return nil, err
	}
	db, err := config.NewDBConnection(appConfig)
	if err != nil {
		return nil, err
	}
	productRepository := repository.NewProductRepository(db)
	productHandler := handlers.NewProductHandler(productRepository)
	router := ProvideRouter(productHandler)
	return router, nil
}

// wire.go:

func ProvideRouter(handler *handlers.ProductHandler) *mux.Router {
	router := mux.NewRouter()
	router.Use(middleware.LoggingMiddleware)
	router.HandleFunc("/products", handler.AddProduct).Methods("POST")
	router.HandleFunc("/products", handler.GetProducts).Methods("GET")
	router.HandleFunc("/products/{id}", handler.GetProductByID).Methods("GET")
	router.HandleFunc("/products/{id}", handler.UpdateProduct).Methods("PUT")
	router.HandleFunc("/products/{id}", handler.DeleteProduct).Methods("DELETE")
	return router
}

func ProvideAppConfig() (*config2.AppConfig, error) {
	return config2.LoadConfig()
}
